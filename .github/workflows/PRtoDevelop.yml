name: CI - Tests And Inspection

on:
  pull_request:
    branches: [ "develop" ]

env:
  DOTNET_VERSION: "8.0.x"
  ASPNETCORE_ENVIRONMENT: "Test"

jobs:
  # ======================================================
  # 1️⃣ BUILD JOB - Compila tudo incluindo Tests
  # ======================================================
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Cache do NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restaurar dependências
        run: dotnet restore SeePaw.sln

      - name: Compilar projeto (incluindo Tests)
        run: dotnet build SeePaw.sln --no-restore --configuration Release

      - name: Guardar artefactos do build
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            **/bin/Release/
            **/obj/Release/

  # ======================================================
  # 2️⃣ UNIT TESTS - Usa os binários já compilados
  # ======================================================
  unit_tests:
      runs-on: ubuntu-latest
      needs: build  # Mantém a dependência para garantir que build passou
    
      steps:
        - name: Checkout código
          uses: actions/checkout@v4
    
        - name: Setup .NET
          uses: actions/setup-dotnet@v4
          with:
            dotnet-version: 8.0.x
    
        - name: Restaurar e compilar
          run: |
            dotnet restore SeePaw.sln
            dotnet build SeePaw.sln --no-restore --configuration Release
    
        - name: Correr testes unitários + Cobertura
          run: |
            mkdir -p TestResults
            
            dotnet test Tests/Tests.csproj \
              --no-build \
              --configuration Release \
              --logger "trx;LogFileName=test-results.trx" \
              --results-directory TestResults \
              --collect:"XPlat Code Coverage" \
              -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
    
        - name: Mostrar resumo dos testes
          if: always()
          run: |
              if [ -f TestResults/test-results.trx ]; then
                passed=$(grep -o 'outcome="Passed"' TestResults/test-results.trx | wc -l || echo "0")
                failed=$(grep -o 'outcome="Failed"' TestResults/test-results.trx | wc -l || echo "0")
                total=$((passed + failed))
                
                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                echo "📊 RESUMO DOS TESTES UNITÁRIOS"
                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
                echo "   Total: $total"
                echo "   ✅ Passaram: $passed"
                echo "   ❌ Falharam: $failed"
                
                if [ $failed -eq 0 ] && [ $total -gt 0 ]; then
                  echo "   🎉 Todos os testes passaram!"
                elif [ $failed -gt 0 ]; then
                  echo "   ⚠️  Alguns testes falharam"
                fi
                echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
              fi

        - name: Exportar resultados de testes
          uses: actions/upload-artifact@v4
          with:
            name: unit-test-results
            path: |
              TestResults/*.trx
              TestResults/*.xml
            if-no-files-found: warn

  # ======================================================
  # 3️⃣ INTEGRATION TESTS
  # ======================================================
  integration_tests:
    runs-on: ubuntu-latest
    needs: build

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: seepaw
          POSTGRES_PASSWORD: seepaw
          POSTGRES_DB: seepaw_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U seepaw -d seepaw_test"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    env:
      ASPNETCORE_ENVIRONMENT: Docker
      ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=seepaw_test;Username=seepaw;Password=seepaw"

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Descarregar artefactos do build
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          path: ./

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Iniciar API em background
        run: |
          echo "🚀 A iniciar a API..."
          dotnet API/bin/Release/net8.0/API.dll --urls "http://0.0.0.0:5000" &
          echo $! > server_pid.txt
          echo "⏳ A aguardar que a API fique pronta..."
          timeout 60 bash -c '
            until nc -z localhost 5000; do
              echo "Aguardando..."
              sleep 3
            done
          ' || (echo "❌ A API não respondeu a tempo" && exit 1)
          echo "✅ API pronta!"

      - name: Instalar Postman CLI
        run: curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      - name: Login no Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}

      - name: Executar testes da coleção "Tests"
        run: |
          echo "🧪 A correr testes da coleção 'Tests'..."
          postman collection run "49202149-e729c377-5226-4751-b8cd-e7859a23f970" \
            -e "49202149-c4d5ea7f-8f78-4508-9184-1398a1872404" \
            --folder "Tests" \
            --integration-id "github-actions-run-${{ github.run_id }}" \
            --env-var "url=http://localhost:5000" \
            --reporters cli,json,junit \
            --reporter-json-export "TestResults/result-Tests.json" \
            --reporter-junit-export "TestResults/junit-Tests.xml"
      
      - name: Upload resultados de integração
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: TestResults/
          if-no-files-found: warn

      - name: Parar API
        if: always()
        run: kill $(cat server_pid.txt) || true

  # ======================================================
  # 4️⃣ QUALITY GATE (SonarCloud)
  # ======================================================
  quality_gate:
    runs-on: ubuntu-latest
    needs: [unit_tests, integration_tests]

    steps:
      - name: Checkout código
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download resultados de testes
        uses: actions/download-artifact@v4
        with:
          pattern: '*-test-results'
          path: TestResults/
          merge-multiple: true

      - name: Validar artefactos
        run: |
          echo "🔍 Verificando artefactos..."
          find TestResults -type f -name "*.xml"
          find TestResults -type f -name "*.trx"

      # Quality Gates 1-4 (mantém como estão)
      - name: Quality Gate 1 - Validar Testes Unitários
        run: |
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "📊 QUALITY GATE 1: TESTES UNITÁRIOS"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          
          trx_file=$(find TestResults -name "*.trx" | head -1)
          
          if [ -z "$trx_file" ]; then
            echo "❌ Ficheiro TRX não encontrado"
            exit 1
          fi
          
          passed=$(grep -o 'outcome="Passed"' "$trx_file" | wc -l || echo "0")
          failed=$(grep -o 'outcome="Failed"' "$trx_file" | wc -l || echo "0")
          total=$((passed + failed))
          
          echo "Total: $total | Passaram: $passed | Falharam: $failed"
          
          if [ $failed -gt 0 ] || [ $total -eq 0 ]; then
            echo "❌ QUALITY GATE FALHOU"
            exit 1
          fi
          
          echo "✅ QUALITY GATE PASSOU: Todos os $total testes passaram"

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@v3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.organization=see-paw
            -Dsonar.projectKey=see-paw_backend
            -Dsonar.sources=API,Domain,Persistence
            -Dsonar.tests=Tests
            -Dsonar.cs.opencover.reportsPaths=**/coverage.xml
            -Dsonar.coverage.exclusions=**/Migrations/**,**/Program.cs
            -Dsonar.exclusions=**/Dockerfile,**/Dockerfile.*,**/*.dockerfile
            -Dsonar.qualitygate.wait=true

      - name: Resumo Final
        if: always()
        run: |
          echo ""
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
          echo "🎯 PIPELINE CONCLUÍDA"
          echo "━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━"
