name: CI - Tests And Inspection (Local Artifacts)

on:
  pull_request:
    branches: [ "develop" ]
    paths-ignore:
      - '.github/workflows/**'

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  DOTNET_VERSION: "8.0.x"
  ASPNETCORE_ENVIRONMENT: "Test"
  ARTIFACTS_DIR: /home/runner/_work/artifacts

jobs:
  # ======================================================
  # 1️⃣ BUILD JOB
  # ======================================================
  build:
    runs-on: [self-hosted, runner1]

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Cache do NuGet
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restaurar dependências
        run: dotnet restore backend.sln

      - name: Compilar projeto
        run: dotnet build backend.sln --no-restore --configuration Release

      - name: Guardar artefactos do build localmente
        run: |
          echo "💾 A guardar artefactos de build em $ARTIFACTS_DIR/build-artifacts"
          mkdir -p $ARTIFACTS_DIR/build-artifacts
          rm -rf $ARTIFACTS_DIR/build-artifacts/*
          cp -r **/bin/Release/** $ARTIFACTS_DIR/build-artifacts/


  # ======================================================
  # 2️⃣ UNIT TESTS
  # ======================================================
  unit_tests:
    runs-on: [self-hosted, runner1]
    needs: build

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Restaurar dependências
        run: dotnet restore backend.sln

      - name: Compilar solução completa
        run: dotnet build backend.sln --no-restore --configuration Release

      - name: Instalar ferramentas de cobertura
        run: |
          dotnet add Tests/Tests.csproj package coverlet.collector
          dotnet tool install --global dotnet-reportgenerator-globaltool
          export PATH="$PATH:$HOME/.dotnet/tools"

      - name: Correr testes unitários (xUnit) + Cobertura
        run: |
          mkdir -p $ARTIFACTS_DIR/unit-test-results
          echo "🧪 A testar: Tests/Tests.csproj"
          
          dotnet test Tests/Tests.csproj \
            --no-restore \
            --configuration Release \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory $ARTIFACTS_DIR/unit-test-results \
            --collect:"XPlat Code Coverage" \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover
          
          echo "✅ Testes concluídos"
          coverage_file=$(find $ARTIFACTS_DIR/unit-test-results -name "coverage.*.xml" | head -1)
          if [ -n "$coverage_file" ]; then
            cp "$coverage_file" $ARTIFACTS_DIR/unit-test-results/coverage.xml
          else
            echo "⚠️ Nenhum ficheiro de cobertura encontrado"
            exit 1
          fi

      - name: Gerar relatório HTML de cobertura
        run: |
          export PATH="$PATH:$HOME/.dotnet/tools"
          if [ -f $ARTIFACTS_DIR/unit-test-results/coverage.xml ]; then
            echo "📊 A gerar relatório HTML de cobertura..."
            reportgenerator \
              -reports:$ARTIFACTS_DIR/unit-test-results/coverage.xml \
              -targetdir:$ARTIFACTS_DIR/unit-test-results/CoverageReport \
              -reporttypes:"Html;HtmlSummary"
            echo "✅ Relatório HTML gerado localmente em $ARTIFACTS_DIR/unit-test-results/CoverageReport/"
          fi

      - name: Aplicar Quality Gates personalizadas
        run: |
          coverage_file="$ARTIFACTS_DIR/unit-test-results/coverage.xml"
          if [ ! -f "$coverage_file" ]; then
            echo "❌ Ficheiro de cobertura não encontrado!"
            exit 1
          fi
          coverage_data=$(cat "$coverage_file")
          total_sequences=$(echo "$coverage_data" | grep -oP '<SequencePoint vc="[0-9]+"' | wc -l)
          covered_sequences=$(echo "$coverage_data" | grep -oP '<SequencePoint vc="[1-9][0-9]*"' | wc -l)
          overall_coverage=$((covered_sequences * 100 / total_sequences))
          echo "📊 Cobertura geral: ${overall_coverage}%"
          pr_title="${{ github.event.pull_request.title }}"
          pr_title_lower=$(echo "$pr_title" | tr '[:upper:]' '[:lower:]')
          threshold=0
          if echo "$pr_title_lower" | grep -q "basic"; then
            threshold=40
          elif echo "$pr_title_lower" | grep -q "medium"; then
            threshold=60
          elif echo "$pr_title_lower" | grep -q "advanced"; then
            threshold=80
          else
            echo "⚠️ Nenhum nível de qualidade detetado — assumindo sucesso"
            exit 0
          fi
          if [ $overall_coverage -ge $threshold ]; then
            echo "✅ Quality Gate passou (${overall_coverage}% ≥ ${threshold}%)"
          else
            echo "❌ Quality Gate falhou (${overall_coverage}% < ${threshold}%)"
            exit 1
          fi


  # ======================================================
  # 3️⃣ INTEGRATION TESTS (POSTMAN CLI)
  # ======================================================
  integration_tests:
    runs-on: [self-hosted, runner1]
    needs: build

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_USER: seepaw
          POSTGRES_PASSWORD: seepaw
          POSTGRES_DB: seepaw_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd="pg_isready -U seepaw -d seepaw_test"
          --health-interval=5s
          --health-timeout=5s
          --health-retries=20

    env:
      ASPNETCORE_ENVIRONMENT: Docker
      ConnectionStrings__DefaultConnection: "Host=localhost;Port=5432;Database=seepaw_test;Username=seepaw;Password=seepaw"

    steps:
      - name: Checkout código
        uses: actions/checkout@v4

      - name: Carregar build local
        run: |
          echo "📦 A copiar build local de $ARTIFACTS_DIR/build-artifacts"
          cp -r $ARTIFACTS_DIR/build-artifacts/** ./

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x

      - name: Restaurar dependências
        run: dotnet restore backend.sln

      - name: Iniciar API em background
        run: |
          echo "🚀 A iniciar a API..."
          dotnet run --project WebAPI/WebAPI.csproj --configuration Release --no-build --urls "http://0.0.0.0:5000" &
          echo $! > server_pid.txt
          timeout 60 bash -c 'until nc -z localhost 5000; do sleep 3; done' || (echo "❌ API não respondeu a tempo" && exit 1)
          echo "✅ API pronta!"

      - name: Instalar Postman CLI
        run: curl -o- "https://dl-cli.pstmn.io/install/linux64.sh" | sh

      - name: Login no Postman CLI
        run: postman login --with-api-key ${{ secrets.POSTMAN_API_KEY }}

      - name: Executar testes Postman e guardar localmente
        run: |
          mkdir -p $ARTIFACTS_DIR/integration-test-results/postman
          postman collection run "${{ secrets.POSTMAN_COLLECTION_ID }}" \
            -e "${{ secrets.POSTMAN_ENV_ID }}" \
            --env-var "url=http://localhost:5000" \
            --reporters cli,json,html \
            --reporter-json-export $ARTIFACTS_DIR/integration-test-results/postman/results.json \
            --reporter-html-export $ARTIFACTS_DIR/integration-test-results/postman/report.html \
            --bail false
          echo "✅ Resultados guardados localmente em $ARTIFACTS_DIR/integration-test-results/postman/"

      - name: Comentar resultados no PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const summaryPath = process.env.ARTIFACTS_DIR + '/integration-test-results/postman/results.json';
            let summary = { run: { stats: { assertions: { total: 0, failed: 0 } } } };
            if (fs.existsSync(summaryPath)) summary = JSON.parse(fs.readFileSync(summaryPath, 'utf8'));
            const total = summary.run.stats.assertions.total || 0;
            const failed = summary.run.stats.assertions.failed || 0;
            const passed = total - failed;
            const emoji = failed === 0 ? '✅' : '❌';
            const comment = `
            ## ${emoji} Testes de Integração (Postman)
            **Resumo:**
            - 🧪 Total de testes: ${total}
            - ✅ Passaram: ${passed}
            - ❌ Falharam: ${failed}
            📄 Relatório local: \`${process.env.ARTIFACTS_DIR}/integration-test-results/postman/report.html\`
            `;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Parar API e containers
        if: always()
        run: |
          echo "🧹 A encerrar ambiente de teste..."
          kill $(cat server_pid.txt) || true
